#!/usr/bin/env bash

#
# Adone and Node version managing script
#

VERSION="0.0.1"
INSTALLED_AVM_BIN=/usr/local/bin/avm

check_installed_avm() {
    if test -e $INSTALLED_AVM_BIN; then
        if ! test -f $INSTALLED_AVM_BIN; then
            # something exists, and this is not a file at all
            echo "NOT_A_FILE"
            exit
        fi
        # something exists, maybe this is not avm
        if test -z "$(cat $INSTALLED_AVM_BIN | head -n 4 | tail -n 1 | grep "Adone and Node version managing script")"; then
            echo "ANOTHER_SCRIPT"
            exit
        fi
        echo "OK"
    else
        echo "DOESNT_EXIST"
    fi
}

is_avm_globally_installed() {
    test $(check_installed_avm) = "OK"
}

log() {
    case $# in
        1) printf "  \033[36m%10s\033[0m   \033[2m%s\033[22m\033[0m\n" "" "$1" ;;
        2) printf "  \033[36m%10s\033[0m : \033[2m%s\033[22m\033[0m\n" "$1" "$2" ;;
        3) printf "  \033[36m%10s\033[0m : \033[2m%s\033[22m\033[0m \033[2m%s\033[22m\033[0m\n" "$1" "$2" "$3" ;;
    esac
}

if test -z $AVM_PREFIX; then
    if is_avm_globally_installed; then
        AVM_PREFIX=/usr/local/lib
        AVM_DIR=$AVM_PREFIX/avm
    else
        AVM_PREFIX=$(pwd)
        AVM_DIR=$AVM_PREFIX/.avm
    fi
else
    AVM_DIR=$AVM_PREFIX/.avm
fi

if test -e $AVM_DIR && ! test -d $AVM_DIR; then
    log "error" "$AVM_DIR is not a directory"
    exit 1
fi

VERSIONS_DIR=$AVM_DIR/versions
AVM_MIRROR=${AVM_MIRROR-https://adone.io}/dist
NODE_MIRROR=$AVM_MIRROR/node
ADONE_MIRROR=$AVM_MIRROR/adone
ADONE_DIR=${ADONE_DIR-/usr/local/lib/adone}
NODE_PREFIX=${NODE_PREFIX-/usr/local}
ACTIVATE=true
CLEAN=false

BIN=
MIRROR=

CURL_PARAMS=( "-L"
              "-#" )
WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-" )

FETCH_BIN=

command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}" && FETCH_BIN="wget"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}" && FETCH_BIN="curl"


test -z "$GET" && echo "curl or wget required" && exit 1

display_avm_version() {
    echo $VERSION && exit 0
}

erase_line() {
    printf "\033[1A\033[2K"
}

get_latest_version() {
    $GET $MIRROR/latest/ --header 'Accept: text/plain' 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | head -n 1
}

display_latest_version() {
    log "latest" $(get_latest_version)
}

get_stable_version() {
    $GET $MIRROR/stable/ --header 'Accept: text/plain' 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | head -n 1
}

display_stable_version() {
    log "stable" $(get_stable_version)
}

display_remote_versions() {
    local latest=$(get_latest_version)
    local stable=$(get_stable_version)
    local current=$(check_current_version)
    local versions=$($GET $MIRROR --header 'Accept: text/plain' 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | sort -r -u -k 1,1n -k 2,2n -k 3,3n -t . \
        | awk '{ print " " $1 }'
    )
    for v in $versions; do
        case $v in
            $current)
                case $v in
                    $stable) log "current" $v "(stable)" ;;
                    *) log "current" $v ;;
                esac
            ;;
            *)
                case $v in
                    $stable) log "stable" $v ;;
                    *) log $v ;;
                esac
            ;;
        esac
    done
    if ! test -z $current && test $latest = $current; then
        log "current" $latest "(latest)"
    else
        log "latest" $latest
    fi
}

display_installed_versions() {
    # if test -z $BIN; then
    #     # BIN="adone"
    #     # log "Adone"
    #     # $(display_installed_versions)
    #     BIN="node"
    #     echo Node
    #     display_installed_versions
    #     echo adone
    #     BIN="adone"
    #     display_installed_versions
    #     exit
    # fi
    local contents=$(ls $VERSIONS_DIR/$BIN 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | sort -r -u -k 1,1n -k 2,2n -k 3,3n -t . \
        | awk '{ print " " $1 }'
    )
    if test $? -ne 0; then
        exit
    fi
    local current=$(check_current_version)
    local latest=$(get_latest_version)
    local stable=$(get_stable_version)
    for v in $contents; do
        local resolved=$(resolve_version $v)
        case $resolved in
            $current)
                case $v in
                    $latest) log "current" $v "(latest)" ;;
                    $stable) log "current" $v "(stable)" ;;
                    *) log "current" $v ;;
                esac
            ;;
            *)
                case $v in
                    $latest) log "latest" $v ;;
                    $stable) log "stable" $v ;;
                    *) log $v ;;
                esac
            ;;
        esac
    done
}

resolve_version() {
    local version=$1
    case $version in
        latest) version=$(get_latest_version) ;;
        stable) version=$(get_stable_version) ;;
    esac
    echo $version
}

disable_pax_mprotect() {
    test -z $1 && abort "binary required"
    local binary=$1

    # try to disable mprotect via XATTR_PAX header
    local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
    local PAXCTL_ERROR=1
    if [ -x "$PAXCTL" ]; then
        $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
        PAXCTL_ERROR="$?"
    fi

    # try to disable mprotect via PT_PAX header
    if [ $PAXCTL_ERROR != 0 ]; then
        PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
        if [ -x "$PAXCTL" ]; then
            $PAXCTL -Cm "$binary" >/dev/null 2>&1
        fi
    fi
}

check_current_version() {
    case $BIN in
        node)
            which node > /dev/null
            if test $? -eq 0; then
                echo $(node --version | cut -c 2- )
            fi
        ;;
        adone)
            which adone > /dev/null
            if test $? -eq 0; then
                echo $(adone --version)
            fi
        ;;
    esac
}

activate() {
    local version=$(resolve_version $1)
    local current=$(check_current_version)

    if test -z $current || test $version != $current; then
        local dir=$VERSIONS_DIR/$BIN/$version
        if ! test -e $dir; then
            log "activate" "no such version"
            exit 1
        fi
        if ! is_root_user; then
            log "activate" "need root permissions"
            exit 1
        fi
        log "activate" "$version"
        case $BIN in
            node)
                for subdir in bin lib include share; do
                    if test -L "$NODE_PREFIX/$subdir"; then
                        sudo find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$NODE_PREFIX/$subdir"
                    else
                        sudo cp -fR "$dir/$subdir" $NODE_PREFIX
                    fi
                done
            ;;
            adone)
                rm -rf $ADONE_DIR
                cp -r $dir $ADONE_DIR
                if test -e /usr/local/bin/adone; then
                    rm /usr/local/bin/adone
                fi
                ln -s $ADONE_DIR/bin/adone.js /usr/local/bin/adone
            ;;
        esac
        # disable_pax_mprotect "$NODE_PREFIX/bin/node"
        log "activate" "done"
    else
        log "activate" "$version already activated"
    fi
}

is_root_user() {
    [[ $EUID -eq 0 ]]
}

real_user_name() {
    who am i | awk '{ print $1 }'
}

install_avm() {
    log "avm" "installing"
    local current_avm=$(check_installed_avm)
    case $current_avm in
        NOT_A_FILE)
            log "avm" "there is something in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        ANOTHER_SCRIPT)
            log "avm" "there is another script in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
    esac
    if ! is_root_user; then
        log "avm" "need root permissions"
        exit 1
    fi
    $GET $AVM_MIRROR/avm.sh > /usr/local/bin/avm
    erase_line
    chmod +x /usr/local/bin/avm
    mkdir -p /usr/local/lib/avm
    log "avm" "done"
}

is_ok() {
    case $FETCH_BIN in
        curl)
            $GET -Is $1 | head -n 1 | grep 200 > /dev/null
        ;;
        wget)
            $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
        ;;
    esac
}

install() {
    if test -z $BIN; then
        install_avm
        exit
    fi
    if is_avm_globally_installed && ! is_root_user; then
        log "install" "need root permissions"
        exit
    fi
    local version=$1
    local latest=$(get_latest_version)
    local resolved
    if test $version = $latest; then
        version="latest"
        resolved=$latest
    else
        resolved=$(resolve_version $version)
    fi
    local dir=$VERSIONS_DIR/$BIN/$resolved

    if ! test -e $dir; then
        log "install" "$resolved"
        local path=$(tarballpath $version)

        case $BIN in
            node)
                # check nodejs.org first
                urls=("https://nodejs.org/dist$path" "$MIRROR$path")
            ;;
            adone)
                urls=("$MIRROR$path")
            ;;
        esac

        local url

        for i in ${urls[@]}; do
            if is_ok $i; then
                url=$i
                break
            else
                log "fetch" "cannot find $i"
            fi
        done

        if test -z $url; then
            log "fetch" "cannot find any tarball"
            exit 1
        fi

        mkdir -p $dir
        cd $dir
        log "fetch" "$url"
        case $BIN in
            node)
                $GET $url | tar -zxf /dev/stdin --strip-components=1
            ;;
            adone)
                $GET $url | tar -zxf /dev/stdin
            ;;
        esac
        erase_line
        disable_pax_mprotect bin/node
        log "install" "done"
    else
        log "install" "$resolved already installed"
    fi
    if $ACTIVATE; then
        activate $version
    fi
}

remove_avm() {
    local current_avm=$(check_installed_avm)
    case $current_avm in
        NOT_A_FILE)
            log "avm" "there is something in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        ANOTHER_SCRIPT)
            log "avm" "there is another script in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        DOESNT_EXIST)
            log "avm" "is not installed"
            exit
        ;;
    esac
    log "avm" "uninstalling"
    if ! is_root_user; then
        log "avm" "need root permissions"
        exit 1
    fi
    log "avm" "remove avm binary"
    rm /usr/local/bin/avm
    log "avm" "remove avm library"
    rm -r /usr/local/lib/avm
    log "avm" "done"
}

remove_version() {
    if test -z $BIN; then
        remove_avm
        exit
    fi
    local version=$1
    local resolved=$(resolve_version $version)
    local current=$(check_current_version)
    if ! test -z $current && test $current = $resolved; then
        echo "cannot remove currently active version"
        exit 1
    fi
    local dir=$VERSIONS_DIR/$BIN/$resolved
    if test -e $dir; then
        log "remove" "$resolved"
        rm -rf $dir
        log "remove" "done"
    else
        log "remove" "no such version"
    fi
}

tarballpath() {
    local version=$1

    local arch=x86
    local uname=$(uname -a)

    case $uname in
        Linux*) os=linux ;;
        Darwin*) os=darwin ;;
        SunOS*) os=sunos ;;
        FreeBSD*) os=freebsd ;;
    esac

    case $uname in
        *x86_64*|*amd64*) arch=x64 ;;
        *armv6l*) arch=armv6l ;;
        *armv7l*) arch=armv7l ;;
    esac

    # if [ ${arch} = "armv6l" -a ${BIN_NAME[$DEFAULT]} = node ]; then
    #     local semver=${version//./ }
    #     local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    #     local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    #     [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
    # fi

    [ ! -z $ARCH ] && arch=$ARCH

    local resolved=$(resolve_version $version)

    case $version in
        latest)
        ;;
        stable)
        ;;
        *)
            version="v$version"
        ;;
    esac

    echo /$version/$BIN-v$resolved-$os-$arch.tar.gz
}

set_node() {
    BIN="node"
    MIRROR=$NODE_MIRROR
}

set_adone() {
    BIN="adone"
    MIRROR=$ADONE_MIRROR
}

bootstrap() {
    log "avm" "bootstrapping"
    log "avm" "install latest node.js"
    set_node
    install latest
    log "avm" "install latest adone"
    set_adone
    install latest
    if $CLEAN; then
        log "avm" "cleaning"
        rm -rf $AVM_DIR
    fi
    log "avm" "done"
}

display_help() {
  cat <<-EOF

  Usage: avm [options] [COMMAND] [args]

  avm install                         Install avm
  avm update                          Actually, the same as install
  avm rm                              Remove avm
  avm [--clean] bootstrap             Install latest node.js and adone versions

  Node.js management:
    avm node ls                       Display installed node.js versions
    avm node ls-remote                Display available to install node.js versions
    avm node latest                   Display latest node.js version
    avm node stable                   Display stable node.js version
    avm node update                   The same as install latest
    avm node [--download] install <version>
                                      Install node.js version
    avm node activate <version>       Activate node.js version
    avm node rm <version>             Remove node.js version

  Adone management:
    avm adone ls                      Display installed adone versions
    avm adone ls-remote               Display available to install adone versions
    avm adone latest                  Display latest adone version
    avm adone stable                  Display stable adone version
    avm adone update                  The same as install latest
    avm adone [--download] install <version>
                                      Install adone version
    avm adone activate <version>      Activate adone version
    avm adone rm <version>            Remove adone version

  Options:

    -V, --version   Output current version of avm
    -h, --help      Display this help information
    -d, --download  Only download
    -c, --clean     Remove avm directory

EOF
}

#
# Handle arguments.
#

if test $# -eq 0; then
    display_installed_versions
else
  while test $# -ne 0; do
    case $1 in
      -h|--help) display_help; exit ;;
      node) set_node ;;
      adone) set_adone ;;
      -V|--version) display_avm_version; exit ;;
      -d|--download) ACTIVATE=false ;;
      ls) display_installed_versions; exit ;;
      ls-remote) display_remote_versions; exit ;;
      latest) display_latest_version; exit ;;
      stable) display_stable_version; exit ;;
      install) shift; install $1; exit ;;
      activate) shift; activate $1; exit ;;
      rm) shift; remove_version $1; exit ;;
      bootstrap) bootstrap; exit ;;
      -c|--clean) CLEAN=true ;;
      update) install latest; exit ;;
    esac
    shift
  done
fi