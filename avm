#!/usr/bin/env sh

#
# Adone init script (based on https://github.com/tj/n).
#

VERSION="0.1.1"
INIT_PREFIX=${INIT_PREFIX-~/.avm}
N_PREFIX=${N_PREFIX-/usr/local}
BASE_VERSIONS_DIR=$INIT_PREFIX/versions
NODE_URL=${NODE_URL-http://adone.io/public/dist/node/}
NODE_VERSIONS_DIR=$BASE_VERSIONS_DIR/node

log() {
  printf "  \033[32m%10s\033[0m : \033[2m%s\033[22m\033[0m\n" $1 $2
}

error() {
  printf "\n  \033[31mError: $@\033[0m\n\n"
}

warning() {
  printf "\n  \033[33mWarning: $@\033[0m\n\n"
}

abort() {
  error "$@" && printf "\n" && exit 1
}

notsupported() {
  abort "not supported yet"
}

#
# Ensure we have curl or wget support.
#

CURL_PARAMS="-L -#"
WGET_PARAMS="-q -O-"

GET=

which wget > /dev/null && GET="wget ${WGET_PARAMS}"
which curl > /dev/null && GET="curl ${CURL_PARAMS}"

test -z "$GET" && abort "curl or wget required"

#
# State
#

QUIET=false
DOWNLOAD=false
REMOVE_ACTIVE=false
ARCH=

test -d ${BASE_VERSIONS_DIR} || mkdir -p ${BASE_VERSIONS_DIR}

#
# set_arch <arch> to override $(uname -a)
#

set_arch() {
  if test ! -z $1; then
    ARCH=$1
  else
    abort_help "missing -a|--arch value"
  fi
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  Usage: avm [options] [COMMAND] [args]

  Commands:

    avm                               Output local available versions
    avm install                       Install avm global
    avm uninstall                     Uninstall global installed avm
    avm update                        Update global installed avm
    avm list                          Output available adone versions
    avm [--download] [--sources] <version>
                                      Install adone <version>. <version> can be 'latest'
    avm rm [--active] <version ...>   Remove the given adone version(s)
    avm node list                     Output available node versions
    avm node [--download] [--sources] <version>
                                      Install node <version>. <version> can be 'latest'
    avm node rm [--active] <version ...>
                                      Remove the given node version(s)
    avm backup                        Backup current adone version
    avm [--complete] clear            Delete all downloaded

  Options:

    -V, --version   Output current version of avm
    -h, --help      Display this help information
    -q, --quiet     Disable curl output (if available)
    -d, --download  Download only
    -s, --sources   Download sources instead of build
    -a, --arch      Override system architecture
    --active        Force deletetion of active adone/node version
    --complete      Force deletetion of active adone/node version

EOF
}

abort_help() {
  error "$@"
  erase_line
  display_help
  exit 1
}

display_version() {
  echo $VERSION && exit 0
}

#
# Display sorted versions directories paths.
#

versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
  | sed 's|'$BASE_VERSIONS_DIR'/||g' \
  | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
  | sort -k 1,1 -k 2,2n -k 3,3n -t .
}

#
# Display installed versions with <selected>
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[32m+\033[0m [1m$version[m\033[0m\n"
    else
      printf "    \033[2m$version\033[22m\n"
    fi
  done
  echo
}

#
# List installed versions.
#

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Move up a line and erase.
#

erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if the HEAD response of <url> is 200.
#
is_ok() {
  if which curl > /dev/null; then
    $GET -Is $1 | head -n 1 | grep 200 > /dev/null
  else
    $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
  fi
}

#
# Check if the OSS(Object Storage Service) mirror is ok.
#
is_oss_ok() {
  if which curl > /dev/null; then
    if $GET -Is $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -Is $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -Is $1 | head -n 1 | grep 200 > /dev/null
    fi
  else
    if $GET -S --spider 2>&1 $1 | head -n 1 | grep 302 > /dev/null; then
      is_oss_ok $GET -S --spider 2>&1 $1 | grep Location | awk -F ': ' '{print $2}'
    else
      $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
    fi
  fi
}

#
# Disable PaX mprotect for <binary>
#

disable_pax_mprotect() {
  test -z $1 && abort "binary required"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [ -x "$PAXCTL" ]; then
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [ $PAXCTL_ERROR != 0 ]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
    if [ -x "$PAXCTL" ]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# Set curl to quiet (silent) mode.
#

set_quiet() {
  which curl > /dev/null && GET="$GET -s" && QUIET=true
}

#
# Check root access
#

check_root() {
  test `id -u` -eq 0
}

#
# Check for installed node version, and populate $active
#

check_current_node_version() {
  if which node > /dev/null; then
    local current=$(node --version)
    current=${current#v}
    if cmp -s \
    $BASE_VERSIONS_DIR/node/$current/bin/node \
    `which node` ; then
      active=$current
    fi
  fi
}

#
# Display current node --version and others installed.
#

display_versions() {
  check_current_node_version
  display_versions_with_selected $active
}

#
# Determine node tarball url for <version>
#

node_tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
  esac

  if test "$arch" = "armv6l"; then
    local semver=${version//./ }
    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    test $major -eq "" && test $minor -lt 12 && arch=arm-pi
  fi

  test -n "$ARCH" && arch=$ARCH

  echo "${NODE_URL}${version}/${os}-${arch}.tar.gz"

}

#
# Activate node <version>
#

activate_node() {
  local version=$1
  check_current_node_version
  if test "$version" != "$active"; then
    local dir=$NODE_VERSIONS_DIR/$version
    for subdir in bin lib include share; do
      if test -L "$N_PREFIX/$subdir"; then
        find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$N_PREFIX/$subdir" \;
      else
        cp -fR "$dir/$subdir" $N_PREFIX
      fi
    done
    disable_pax_mprotect "$N_PREFIX/bin/node"
    log activated node-v$version
  else
    warning "Node $version is already active"
  fi
}

#
# Install node <version>
#

install_node() {
  check_root || abort "root access required"

  test -d ${NODE_VERSIONS_DIR} || mkdir -p ${NODE_VERSIONS_DIR}

  local version=${1#v}

  local dots=$(echo $version | sed 's/[^.]*//g')
  if test ${#dots} -lt 2; then
    version=$($GET 2> /dev/null ${NODE_URL} \
      | egrep "</a>" \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1)

    test $version || abort_help "invalid version ${1#v}"
  fi

  local dir=${NODE_VERSIONS_DIR}/$version

  if test -d $dir; then
    if test ! -e $dir/n.lock; then
      if test $DOWNLOAD = false ; then
        activate_node $version
      fi
      exit
    fi
  fi

  echo
  log install node-v$version

  local url=$(node_tarball_url $version)
  is_ok $url || is_oss_ok $url || abort "cannot fetch version $version"

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock
  fi

  cd $dir

  log fetch $url
  $GET $url | tar -zx --strip-components=1
  test $QUIET = false && erase_line
  rm -f $dir/n.lock

  disable_pax_mprotect bin/node

  if test $DOWNLOAD = false ; then
    activate_node $version
    log installed node-$(node --version)
  fi
  echo
}

#
# Remove active node
#

remove_node_active() {
  check_root || abort "root access required"

  for f in `find ${NODE_VERSIONS_DIR}/$active -mindepth 2 ! -type d | sort -r`; do
    rm "$N_PREFIX${f#${NODE_VERSIONS_DIR}/$active}"
  done

  for d in `find ${NODE_VERSIONS_DIR}/$active -mindepth 2 -type d | sort -r`; do
    rmdir "$N_PREFIX${d#${NODE_VERSIONS_DIR}/$active}" > /dev/null
  done
}

#
# Remove node <version ...>
#

remove_node_versions() {
  if test $1 = "--active"; then
    REMOVE_ACTIVE=true
    shift
  fi

  test -z $1 && abort_help "version(s) required"
  check_current_node_version
  while test $# -ne 0; do
    local version=${1#v}
    test -d ${NODE_VERSIONS_DIR}/$version || abort_help "Node version $version is not installed"
    if test "$version" = "$active"; then
      if test $REMOVE_ACTIVE = true; then
        remove_node_active
      else
        abort_help "Cannot remove currently active version ($active).\n         Specify --active option to force removing."
      fi
    fi
    rm -rf ${NODE_VERSIONS_DIR}/$version
    log removed $version
    shift
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=${NODE_VERSIONS_DIR}/$version/bin/node
  if test -f $bin; then
    printf "$bin \n"
  else
    abort "$1 is not installed"
  fi
}

#
# Display the latest release version.
#

display_latest_version() {
  $GET 2> /dev/null ${NODE_URL} \
  | egrep "</a>" \
  | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
  | egrep -v '^0\.[0-7]\.' \
  | egrep -v '^0\.8\.[0-5]$' \
  | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
  | tail -n1
}

#
# Display the latest stable release version.
#

display_latest_stable_version() {
  $GET 2> /dev/null ${NODE_URL} \
  | egrep "</a>" \
  | egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
  | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
  | tail -n1
}

#
# Display the latest lts release version.
#

display_latest_lts_version() {
  local folder_name=$($GET 2> /dev/null ${NODE_URL} \
    | egrep "</a>" \
    | egrep -o 'latest-[a-z]{2,}' \
    | sort \
  | tail -n1)

  $GET 2> /dev/null ${NODE_URL}/$folder_name/ \
  | egrep "</a>" \
  | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
  | head -n1
}

#
# Display the versions available.
#

display_remote_versions() {
  check_current_node_version
  local versions=""
  versions=$($GET 2> /dev/null ${NODE_URL} \
    | egrep "href" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
  | awk '{ print "  " $1 }')

  echo
  local bin=${NODE}
  for v in $versions; do
    if test "$active" = "$bin/$v"; then
      printf "  \033[32m+\033[0m [1m$v[m\033[0m\n"
    else
      if test -d $BASE_VERSIONS_DIR/$bin/$v; then
        printf "    $v \033[0m\n"
      else
        printf "    \033[2m$v\033[22m\n"
      fi
    fi
  done
  echo
}

#
# NodeJs version management
#

node_command() {
  if test $# -eq 0; then
    test -z "$(versions_paths)" && abort_help "no installed versions"
    display_versions
  else
    while test $# -ne 0; do
      case $1 in
        --latest) display_latest_version; exit ;;
        --stable) display_latest_stable_version; exit ;;
        --lts) display_latest_lts_version; exit ;;
        bin) display_bin_path_for_version $2; exit ;;
        rm) shift; remove_node_versions $@; exit ;;
        latest) install_node $(display_latest_version); exit ;;
        stable) install_node $(display_latest_stable_version); exit ;;
        lts) install_node $(display_latest_lts_version); exit ;;
        list) display_remote_versions; exit ;;
        *) install_node $1; exit ;;
      esac
      shift
    done
  fi
}

#
# Handle arguments.
#

if test $# -eq 0; then
  test -z "$(versions_paths)" && abort_help "no installed versions"
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_version exit ;;
      -h|--help|help) display_help; exit ;;
      -q|--quiet) set_quiet ;;
      -d|--download) DOWNLOAD=true ;;
      -a|--arch) shift; set_arch $1;;
      node) shift; node_command $@; exit ;;
      *) notsupported; exit ;;
    esac
    shift
  done
fi
