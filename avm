#!/usr/bin/env bash

#
# Adone and Node version managing script
#

VERSION="0.4.0"
INSTALLED_AVM_BIN=/usr/local/bin/avm

check_installed_avm() {
    if test -e $INSTALLED_AVM_BIN; then
        if ! test -f $INSTALLED_AVM_BIN; then
            # something exists, and this is not a file at all
            echo "NOT_A_FILE"
            exit
        fi
        # something exists, maybe this is not avm
        if test -z "$(cat $INSTALLED_AVM_BIN | head -n 4 | tail -n 1 | grep "Adone and Node version managing script")"; then
            echo "ANOTHER_SCRIPT"
            exit
        fi
        echo "OK"
    else
        echo "DOESNT_EXIST"
    fi
}

is_avm_globally_installed() {
    test $(check_installed_avm) = "OK"
}

log() {
    case $# in
        1) printf "  \033[36m%10s\033[0m   \033[2m%s\033[22m\033[0m\n" "" "$1" ;;
        2) printf "  \033[36m%10s\033[0m : \033[2m%s\033[22m\033[0m\n" "$1" "$2" ;;
        3) printf "  \033[36m%10s\033[0m : \033[2m%s\033[22m\033[0m \033[2m%s\033[22m\033[0m\n" "$1" "$2" "$3" ;;
    esac
}

if test -z $AVM_PREFIX; then
    if is_avm_globally_installed; then
        AVM_PREFIX=/usr/local/lib
        AVM_DIR=$AVM_PREFIX/avm
    else
        AVM_PREFIX=$(pwd)
        AVM_DIR=$AVM_PREFIX/.avm
    fi
else
    AVM_DIR=$AVM_PREFIX/.avm
fi

if test -e $AVM_DIR && ! test -d $AVM_DIR; then
    log "error" "$AVM_DIR is not a directory"
    exit 1
fi

ORIGINAL_USER=${SUDO_USER:-$(whoami)}
ORIGINAL_GROUP=$(id -g $ORIGINAL_USER)
ORIGINAL_USER_HOME_DIR=$(eval echo ~$ORIGINAL_USER)
VERSIONS_DIR=$AVM_DIR/versions
AVM_MIRROR=${AVM_MIRROR-https://adone.io}/dist
NODE_MIRROR=$AVM_MIRROR/node
ADONE_MIRROR=$AVM_MIRROR/adone
ADONE_DIR=${ADONE_DIR-$ORIGINAL_USER_HOME_DIR/.adone}
NODE_PREFIX=${NODE_PREFIX-/usr/local}
FORCE=false
CLEAN=false

BIN=
MIRROR=

CURL_PARAMS=( "-L"
              "-#" )
WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-" )

FETCH_BIN=

command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}" && FETCH_BIN="wget"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}" && FETCH_BIN="curl"


test -z "$GET" && echo "curl or wget required" && exit 1

display_avm_version() {
    echo $VERSION && exit 0
}

erase_line() {
    printf "\033[1A\033[2K"
}

get_latest_version() {
    $GET $MIRROR/latest/ --header 'Accept: text/plain' 2>/dev/null \
        | sed "s|$AVM_MIRROR||" \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | head -n 1
}

display_latest_version() {
    log "latest" $(get_latest_version)
}

get_stable_version() {
    $GET $MIRROR/stable/ --header 'Accept: text/plain' 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | head -n 1
}

display_stable_version() {
    log "stable" $(get_stable_version)
}

display_remote_versions() {
    local latest=$(get_latest_version)
    local stable=$(get_stable_version)
    local current=$(check_current_version)
    local versions=$($GET $MIRROR --header 'Accept: text/plain' 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | sort -r -u -k 1,1n -k 2,2n -k 3,3n -t . \
        | awk '{ print " " $1 }'
    )
    for v in $versions; do
        case $v in
            $current)
                case $v in
                    $stable) log "current" $v "(stable)" ;;
                    $latest) log "current" $v "(latest)" ;;
                    *) log "current" $v ;;
                esac
            ;;
            *)
                case $v in
                    $stable) log "stable" $v ;;
                    $latest) log "latest" $v ;;
                    *) log $v ;;
                esac
            ;;
        esac
    done
}

display_installed_versions() {
    case $BIN in
        node)
            display_installed_node_versions
        ;;
        adone)
            display_installed_adone_versions
        ;;
    esac
}

display_installed_node_versions() {
    local contents=$(ls $VERSIONS_DIR/$BIN 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | sort -r -u -k 1,1n -k 2,2n -k 3,3n -t . \
        | awk '{ print " " $1 }'
    )
    if test $? -ne 0; then
        exit
    fi
    local current=$(check_current_version)
    local latest=$(get_latest_version)
    for v in $contents; do
        local resolved=$(resolve_version $v)
        case $resolved in
            $current)
                case $v in
                    $latest) log "current" $v "(latest)" ;;
                    $stable) log "current" $v "(stable)" ;;
                    *) log "current" $v ;;
                esac
            ;;
            *)
                case $v in
                    $latest) log "latest" $v ;;
                    $stable) log "stable" $v ;;
                    *) log $v ;;
                esac
            ;;
        esac
    done
}

display_installed_adone_versions() {
    local contents=$(ls $VERSIONS_DIR/$BIN 2>/dev/null \
        | egrep -o "[0-9]+\.[0-9]+\.[0-9]+" \
        | sort -r -u -k 1,1n -k 2,2n -k 3,3n -t . \
        | awk '{ print " " $1 }'
    )
    if test $? -ne 0; then
        exit
    fi
    local current=$(check_current_version)
    local latest=$(get_latest_version)
    local node_version=$(adone_node_version)
    for v in $contents; do
        local contents2=$(ls $VERSIONS_DIR/$BIN/$v 2>/dev/null \
            | egrep -o "[0-9]+\.x" \
            | sort -r -u -k 1,1n -t . \
            | awk '{ print " " $1 }'
        )
        for nv in $contents2; do
            if test $v = $current; then
                if test $v = $latest; then
                    if test $nv = $node_version; then
                        log "current" "$v $nv" "(latest)"
                    else
                        log "latest" "$v $nv"
                    fi
                else
                    if test $nv = $node_version; then
                        log "current" "$v $nv"
                    else
                        log "$v $nv"
                    fi
                fi
            else
                if test $v = $latest; then
                    log "latest" "$v $nv"
                else
                    log "$v $nv"
                fi
            fi;
        done
    done
}

resolve_version() {
    local version=$1
    case $version in
        latest) version=$(get_latest_version) ;;
        stable) version=$(get_stable_version) ;;
    esac
    echo $version
}

disable_pax_mprotect() {
    test -z $1 && abort "binary required"
    local binary=$1

    # try to disable mprotect via XATTR_PAX header
    local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
    local PAXCTL_ERROR=1
    if [ -x "$PAXCTL" ]; then
        $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
        PAXCTL_ERROR="$?"
    fi

    # try to disable mprotect via PT_PAX header
    if [ $PAXCTL_ERROR != 0 ]; then
        PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
        if [ -x "$PAXCTL" ]; then
            $PAXCTL -Cm "$binary" >/dev/null 2>&1
        fi
    fi
}

check_current_node_version() {
    which node > /dev/null
    if test $? -eq 0; then
        node --version | cut -c 2-
    fi
}

run_as_original_user() {
    sudo -u $ORIGINAL_USER "$@"
}

run_adone() {
    if is_root_user; then
        run_as_original_user adone "$@"
    else
        adone "$@"
    fi
}

check_current_adone_version() {
    which adone > /dev/null
    if test $? -eq 0; then
        run_adone --version
    fi
}

check_current_version() {
    case $BIN in
        node)
            check_current_node_version
        ;;
        adone)
            check_current_adone_version
        ;;
    esac
}

is_root_user() {
    [[ $EUID -eq 0 ]]
}

real_user_name() {
    who am i | awk '{ print $1 }'
}

install_avm() {
    log "avm" "installing"
    local current_avm=$(check_installed_avm)
    case $current_avm in
        NOT_A_FILE)
            log "avm" "there is something in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        ANOTHER_SCRIPT)
            log "avm" "there is another script in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
    esac
    if ! is_root_user; then
        log "avm" "need root permissions"
        exit 1
    fi
    local tmpfile=$(mktemp)
    $GET $AVM_MIRROR/avm.sh > $tmpfile
    if test $? -ne 0; then
        log "avm" "cannot download"
        rm $tmpfile
        exit 1
    fi
    erase_line
    mv $tmpfile /usr/local/bin/avm
    chmod +rx /usr/local/bin/avm
    mkdir -p /usr/local/lib/avm
    log "avm" "done"
}

upload_avm() {
    if test -z $USER || test -z $PASS; then
        log "upload" "username and password is required for uploading"
        exit 1
    fi
    log "upload" "$1 to $AVM_MIRROR"
    curl -# -s --data-binary @$1 -X POST -u $USER:$PASS -f "$AVM_MIRROR/?subject=avm" > /dev/null
    local exit_code=$?
    if test $exit_code != 0; then
        if test $exit_code = 22; then
            log "upload" "uploading failed, http server returned code >= 400"
        else
            log "upload" "uploading failed with exit code $exit_code"
        fi
        exit 1
    else
        log "upload" "done"
    fi
}

is_ok() {
    case $FETCH_BIN in
        curl)
            $GET -Is $1 | head -n 1 | grep 200 > /dev/null
        ;;
        wget)
            $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
        ;;
    esac
}

download() {
    case $BIN in
        adone)
            download_adone $1
        ;;
        node)
            download_node $1
        ;;
    esac
}

node_tarball_path() {
    local version=$1

    local arch=x86
    local uname=$(uname -a)

    case $uname in
        Linux*) os=linux ;;
        Darwin*) os=darwin ;;
        SunOS*) os=sunos ;;
        FreeBSD*) os=freebsd ;;
    esac

    case $uname in
        *x86_64*|*amd64*) arch=x64 ;;
        *armv6l*) arch=armv6l ;;
        *armv7l*) arch=armv7l ;;
    esac

    [ ! -z $ARCH ] && arch=$ARCH

    local resolved=$(resolve_version $version)

    version="v$resolved"

    echo /$version/$BIN-$version-$os-$arch.tar.gz
}

download_node() {
    if is_avm_globally_installed && ! is_root_user; then
        log "download" "need root permissions"
        exit
    fi
    local version=$1
    local latest=$(get_latest_version)
    local resolved
    if test $version = $latest; then
        version="latest"
        resolved=$latest
    else
        resolved=$(resolve_version $version)
    fi
    local dir=$VERSIONS_DIR/$BIN/$resolved

    if ! test -e $dir || $FORCE; then
        log "download" "$resolved"
        local path=$(node_tarball_path $version)
        # check nodejs.org first
        local urls=("https://nodejs.org/dist$path" "$MIRROR$path")

        local url

        for i in ${urls[@]}; do
            if is_ok $i; then
                url=$i
                break
            else
                log "fetch" "cannot find $i"
            fi
        done

        if test -z $url; then
            log "fetch" "cannot find any tarball"
            exit 1
        fi
        rm -r $dir 2>/dev/null
        mkdir -p $dir
        cd $dir
        log "fetch" "$url"
        local tmpfile=$(mktemp)
        $GET $url > $tmpfile
        if test $? -ne 0; then
            log "fetch" "cannot download"
            rm $tmpfile
            exit 1
        fi

        tar -zxf $tmpfile --strip-components=1
        disable_pax_mprotect bin/node

        rm $tmpfile
        erase_line
        log "download" "done"
    else
        log "download" "$resolved already downloaded"
    fi
}

adone_tarball_path() {
    local version=$1
    local node_version=$2

    local arch=x86
    local uname=$(uname -a)

    case $uname in
        Linux*) os=linux ;;
        Darwin*) os=darwin ;;
        SunOS*) os=sunos ;;
        FreeBSD*) os=freebsd ;;
    esac

    case $uname in
        *x86_64*|*amd64*) arch=x64 ;;
        *armv6l*) arch=armv6l ;;
        *armv7l*) arch=armv7l ;;
    esac

    [ ! -z $ARCH ] && arch=$ARCH

    local resolved=$(resolve_version $version)

    version="v$resolved"
    node_version="v$node_version"

    echo /$version/$BIN-$version-$os-$arch-node-$node_version.tar.gz
}

adone_node_version() {
    echo $(check_current_node_version | grep -Eo "^[0-9]+\.")x
}

download_adone() {
    if is_avm_globally_installed && ! is_root_user; then
        log "download" "need root permissions"
        exit
    fi
    local version=$1
    local latest=$(get_latest_version)
    local resolved
    if test $version = $latest; then
        version="latest"
        resolved=$latest
    else
        resolved=$(resolve_version $version)
    fi
    local node_version=$(adone_node_version)

    local dir=$VERSIONS_DIR/$BIN/$resolved/$node_version

    if ! test -e $dir || $FORCE; then
        log "node" "$node_version"
        log "download" "$resolved"
        local path=$(adone_tarball_path $version $node_version)

        local urls=("$MIRROR$path")

        local url

        for i in ${urls[@]}; do
            if is_ok $i; then
                url=$i
                break
            else
                log "fetch" "cannot find $i"
            fi
        done

        if test -z $url; then
            log "fetch" "cannot find any tarball"
            exit 1
        fi
        rm -r $dir 2>/dev/null
        mkdir -p $dir
        cd $dir
        log "fetch" "$url"
        local tmpfile=$(mktemp)
        $GET $url > $tmpfile
        if test $? -ne 0; then
            log "fetch" "cannot download"
            rm $tmpfile
            exit 1
        fi
        tar -zxf $tmpfile
        rm $tmpfile
        erase_line
        log "download" "done"
    else
        log "download" "$resolved already downloaded"
    fi
}

activate() {
    case $BIN in
        node)
            activate_node $1
        ;;
        adone)
            activate_adone $1
        ;;
    esac
}

activate_node() {
    local version=$(resolve_version $1)
    local current=$(check_current_version)

    if test -z $current || $FORCE || test $version != $current; then
        local dir=$VERSIONS_DIR/$BIN/$version
        if ! test -e $dir; then
            log "activate" "no such node version"
            exit 1
        fi
        if ! is_root_user; then
            log "activate" "need root permissions"
            exit 1
        fi
        log "activate" "$version"

        for subdir in bin lib include share; do
            if test -L "$NODE_PREFIX/$subdir"; then
                sudo find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$NODE_PREFIX/$subdir"
            else
                sudo cp -fR "$dir/$subdir" $NODE_PREFIX
            fi
        done

        log "activate" "done"
    else
        log "activate" "$version already activated"
    fi
}

is_omnitron_alive() {
    test "$(run_adone omnitron ping)" = "OK"
}

stop_omnitron() {
    # check if it is a service
    local uname=$(uname -a)
    case $uname in
        Linux*)
            if systemctl is-active omnitron > /dev/null 2>&1; then
                systemctl stop omnitron
                echo "service"
                return
            fi
        ;;
    esac

    run_adone omnitron stop
    echo "manual"
}

start_omnitron() {
    run_adone omnitron start
}

start_omnitron_service() {
    local uname=$(uname -a)
    case $uname in
        Linux*)
            if systemctl is-enabled omnitron > /dev/null 2>&1; then
                systemctl start omnitron
            fi
        ;;
    esac
}

activate_adone() {
    local version=$(resolve_version $1)
    local current=$(check_current_version)
    local node_version=$(adone_node_version)
    local activated_for_node=$(cat $ADONE_DIR/.activated_for_node 2>/dev/null)

    if test -z "$current" || $FORCE || test "$version" != "$current" || ( test -n "$activated_for_node" && test "$activated_for_node" != "$node_version" ); then
        local alive_omnitron=false
        if test -n "$current" && is_omnitron_alive; then
            alive_omnitron=true
        fi;
        local stop_mode
        if $alive_omnitron; then
            log "activate" "stop omnitron"
            stop_mode=$(stop_omnitron)
        fi
        local dir=$VERSIONS_DIR/$BIN/$version/$node_version
        log "node" "$node_version"
        if ! test -e $dir; then
            log "activate" "no such adone version"
            exit 1
        fi
        if ! is_root_user; then
            log "activate" "need root permissions"
            exit 1
        fi
        log "activate" "$version"

        local adone_files=".meta bin etc lib package.json"

        if test -e $ADONE_DIR; then
            for file in $adone_files; do
                rm -rf $ADONE_DIR/$file 2> /dev/null
            done
        else
            # try to create the directory as the original user
            run_as_original_user mkdir -p $ADONE_DIR 2> /dev/null
            if test $? != 0; then
                # failed, create as the root
                mkdir -p $ADONE_DIR
            fi
        fi

        for file in $adone_files; do
            cp -r $dir/$file $ADONE_DIR
        done

        if test $(ls -ld $ADONE_DIR | awk '{ print $3 }') != "root"; then
            local user_group=$(ls -ld $ADONE_DIR | awk '{ print $3 ":" $4 }')
            for file in $adone_files; do
                chown -R $user_group $ADONE_DIR/$file
            done
        fi

        run_as_original_user touch $ADONE_DIR/.activated_for_node 2> /dev/null
        echo $node_version > $ADONE_DIR/.activated_for_node

        if test -e /usr/local/bin/adone; then
            log "activate" "/usr/local/bin/adone already exists"
        else
            ln -s $ADONE_DIR/bin/adone.js /usr/local/bin/adone
        fi


        local prefix=$(npm config get prefix)

        mkdir -p $prefix/lib/node

        if ! test -e $prefix/lib/node/adone; then
            ln -s $ADONE_DIR $prefix/lib/node/adone
        else
            log "activate" "$prefix/lib/node/adone already exists"
        fi

        if $alive_omnitron; then
            log "activate" "start omnitron"
            if test "$stop_mode" = "manual"; then
                start_omnitron
            else
                start_omnitron_service
            fi
        fi
        log "activate" "done"
    else
        log "activate" "$version $node_version already activated"
    fi
}

install() {
    download $1
    activate $1
}

remove_avm() {
    local current_avm=$(check_installed_avm)
    case $current_avm in
        NOT_A_FILE)
            log "avm" "there is something in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        ANOTHER_SCRIPT)
            log "avm" "there is another script in $INSTALLED_AVM_BIN, please check it and try again"
            exit 1
        ;;
        DOESNT_EXIST)
            log "avm" "is not installed"
            exit
        ;;
    esac
    log "avm" "uninstalling"
    if ! is_root_user; then
        log "avm" "need root permissions"
        exit 1
    fi
    log "avm" "remove avm binary"
    rm /usr/local/bin/avm
    log "avm" "remove avm library"
    rm -r /usr/local/lib/avm
    log "avm" "done"
}

remove_version() {
    if ! is_root_user; then
        log "remove" "need root permissions"
        exit 1
    fi
    local version=$1
    if test -n "$version"; then
        local resolved=$(resolve_version $version)
        local current=$(check_current_version)
        local dir=$VERSIONS_DIR/$BIN/$resolved
        if test -e $dir; then
            log "remove" "$resolved"
            rm -rf $dir
            log "remove" "done"
        else
            log "remove" "no such version installed"
        fi
    else
        for file in $(ls $VERSIONS_DIR/$BIN); do
            log "remove" "$file"
            rm -rf $dir
        done
        log "remove" "done"
    fi
}

srcpath() {
    local version=$1
    local arch=x86
    local uname=$(uname -a)

    local resolved=$(resolve_version $version)

    case $version in
        latest)
        ;;
        stable)
        ;;
        *)
            version="v$version"
        ;;
    esac

    echo /$version/$BIN-v$resolved.tar.gz
}

set_node() {
    BIN="node"
    MIRROR=$NODE_MIRROR
}

set_adone() {
    BIN="adone"
    MIRROR=$ADONE_MIRROR
}

bootstrap() {
    log "avm" "bootstrapping"
    log "avm" "install latest node.js"
    set_node
    install latest
    log "avm" "install latest adone"
    set_adone
    install latest
    if $CLEAN; then
        log "avm" "cleaning"
        rm -rf $AVM_DIR
    fi
    log "avm" "done"
}

BUILD=
USER=
PASS=

upload_node() {
    if test -z $USER || test -z $PASS; then
        log "upload" "username and password is required for uploading"
        exit 1
    fi
    for file in "$@"; do
        local archive_type=${file: -2}
        if test $archive_type != "xz" && test $archive_type != "gz"; then
            log "upload" "unknown archive type $file"
        else
            log "upload" "$file to $AVM_MIRROR"
            curl -# -s --data-binary @$file -X POST -u $USER:$PASS -f "$AVM_MIRROR/?os=$os&arch=$arch&type=$archive_type&version=$resolved&subject=node&build=$version" > /dev/null
            local exit_code=$?
            if test $exit_code != 0; then
                if test $exit_code = 22; then
                    log "upload" "uploading failed, http server returned code >= 400"
                else
                    log "upload" "uploading failed with exit code $exit_code"
                fi
                exit 1
            fi
        fi
    done;
    log "upload" "done"
}

build_node() {
    if test $BIN != "node"; then
        log "build" "available only for node"
        exit 1
    fi
    local version=$1
    if test -z $version; then
        log "build" "version is required"
        exit 1
    fi
    if test -z $BUILD && ( test -z $USER || test -z $PASS ); then
        log "build" "username and password is required for uploading"
        exit 1
    fi
    local resolved=$(resolve_version $1)
    log "build" "$resolved"

    local path=$(srcpath $version)
    local url="https://nodejs.org/dist$path"

    if ! is_ok $url; then
        log "fetch" "cannot find $url"
        exit 1
    fi

    local tmpdir=$(mktemp -d)
    log "build" "cd to $tmpdir"
    cd $tmpdir

    log "fetch" "$url"
    $GET $url | tar -zxf /dev/stdin --strip-components=1
    erase_line

    log "build" "start in 5 seconds"
    sleep 5

    local uname=$(uname -a)

    case $uname in
        FreeBSD*)
            # have to fix the makefile to support amd64
            cat Makefile \
                | sed 's/^DESTCPU ?= x86$/ifeq ($(findstring amd64,$(UNAME_M)),amd64)@@DESTCPU ?= x64@@else@@DESTCPU ?= x86@@endif/' \
                | perl -pe 's,@@,chr(0xa),ge' > Makefile2
            mv Makefile2 Makefile
        ;;
    esac

    make binary -j4

    if test $? -ne 0; then
        log "build" "make binary failed"
        exit 1
    fi

    log "build" "finished"

    if ! test -z $BUILD; then
        log "build" "just build, as requested"
        log "build" "tmp dir is $tmpdir"
        exit
    fi

    local arch=x86
    local os

    case $uname in
        Linux*) os=linux ;;
        Darwin*) os=darwin ;;
        SunOS*) os=sunos ;;
        FreeBSD*) os=freebsd ;;
    esac

    case $uname in
        *x86_64*|*amd64*) arch=x64 ;;
        *armv6l*) arch=armv6l ;;
        *armv7l*) arch=armv7l ;;
    esac

    case $version in
        latest)
        ;;
        stable)
        ;;
        *)
            version="v$version"
        ;;
    esac

    upload_node node*tar*

    log "build" "uploaded"

    log "build" "remove tmp directory"

    rm -r $tmpdir

    log "build" "done"
}

display_help() {
  cat <<-EOF

  Usage: avm [options] [COMMAND] [args]

  avm install                         Install avm
  avm update                          Actually, the same as install
  avm rm                              Remove avm
  avm [--clean] bootstrap             Install latest node.js and adone versions
  avm info                            Show info about os and node/adone versions
  avm --user <user> upload <path>     Upload avm script
      --pass <pass>
  Node.js management:
    avm node ls                       Display installed node.js versions
    avm node ls-remote                Display available to install node.js versions
    avm node latest                   Display latest node.js version
    avm node stable                   Display stable node.js version
    avm node update                   The same as force installing the latest version
    avm node [--force] download <version>
                                      Download node.js version
    avm node [--force] activate <version>
                                      Activate node.js version
    avm node [--force] install <version>
                                      Download and activate node.js version
    avm node rm <version>             Remove installed node.js version
    avm node [--build] build <version>
             [--user <user>]          Build node.js version from sources and upload it to adone.io
             [--pass <pass>]
    avm node [--user <user>] upload <path>
             [--pass <pass>]          Upload node.js builds
  Adone management:
    avm adone ls                      Display installed adone versions
    avm adone ls-remote               Display available to install adone versions
    avm adone latest                  Display latest adone version
    avm adone stable                  Display stable adone version
    avm adone update                  The same as force installing the latest version
    avm adone [--force] download <version>
                                      Download adone version
    avm adone [--force] activate <version>
                                      Activate downloaded adone version
    avm adone [--force] install <version>
                                      Download and activate adone version
    avm adone rm [<version>]            Remove installed adone version
    avm adone link <name>             Create a symbolic link to adone binary
    avm adone rm-link <name>          Remove a symbolic link to adone binary

  Adone dependencies:
    avm deps                          List all the dependencies
    avm deps install                  Install all the dependencies
    avm deps install <package> [<package> ...]
                                      Install particular dependencies

  Options:

    -V, --version     Output current version of avm
    -h, --help        Display this help information
    -d, --download    Only download
    -f, --force       Force download/activate
    -c, --clean       Remove avm directory
    -b, --build       Just build, do not upload
    --user            Username for uploading
    --pass            Password for uploading

EOF
}

list_deps_packages() {
    cat <<-EOF
    libpcap-dev
    libusb-1.0.0-dev
    libcurl4-openssl-dev
    libssl-dev
    libvirt-dev
EOF
}

install_libusb() {
    local kernel=$(uname -s)
    local node=$(uname -n)
    case $kernel in
        Linux)
            apt-get -y install libusb-1.0.0-dev
        ;;
        FreeBSD)
            # no need
        ;;
        *)
            log "libusb" "cannot install on $kernel"
            exit 1
        ;;
    esac
}

install_libpcap() {
    local kernel=$(uname -s)
    case $kernel in
        Linux)
            apt-get -y install libpcap-dev
        ;;
        FreeBSD)
            # no need
        ;;
        *)
            log "libpcap" "cannot install on $kernel"
            exit 1
        ;;
    esac
}

install_libcurl4_openssl() {
    local kernel=$(uname -s)
    case $kernel in
        Linux)
            apt-get -y install libcurl4-openssl-dev
        ;;
        *)
            log "libcurl4-openssl" "cannot install on $kernel"
            exit 1
        ;;
    esac
}

install_libssl() {
    local kernel=$(uname -s)
    case $kernel in
        Linux)
            apt-get -y install libssl-dev
        ;;
        *)
            log "libssl" "cannot install on $kernel"
            exit 1
        ;;
    esac
}

install_libvirt() {
    local kernel=$(uname -s)
    case $kernel in
        Linux)
            apt-get -y install libvirt-dev
        ;;
        *)
            log "libssl" "cannot install on $kernel"
            exit 1
        ;;
    esac
}

deps_install() {
    local deps=$(list_deps_packages)
    if test $# -eq 0; then
        deps_install ${deps[@]}
        exit
    fi
    if ! is_root_user; then
        log "deps" "need root permissions"
        exit 1
    fi
    for dep in $@; do
        log "deps" "install $dep"
        case $dep in
            libusb*) install_libusb ;;
            libpcap*) install_libpcap ;;
            libcurl*) install_libcurl4_openssl ;;
            libssl*) install_libssl ;;
            libvirt*) install_libvirt ;;
        esac
        if test $? -ne 0; then
            log "deps" "installing of $dep failed"
            exit 1
        else
            log "deps" "$dep done"
        fi
    done
}

deps_arguments_handler() {
    if test $# -eq 0; then
        for i in $(list_deps_packages); do
            log "$i"
        done
        exit
    fi
    while test $# -ne 0; do
        case $1 in
            install) shift; deps_install $@; exit ;;
            *) exit ;;
        esac
        shift;
    done
}

adone_link() {
    if ! is_root_user; then
        log "link" "need root permissions"
        exit 1
    fi
    local link_name=/usr/local/bin/$1
    if test -e $link_name; then
        log "link" "such a name already exists"
        exit 1
    fi
    ln -s /usr/local/bin/adone $link_name
}

adone_rm_link() {
    if ! is_root_user; then
        log "rm-link" "need root permissions"
        exit 1
    fi
    local name=/usr/local/bin/$1
    if ! test -L $name; then
        log "rm-link" "not a link"
        exit 1
    fi
    local target=$(readlink $name)
    if test $target = "/usr/local/bin/adone"; then
        rm $name
    else
        log "rm-link" "unknown name"
        exit 1
    fi
}

info() {
    log "os" "$(uname -s) $(uname -i) $(uname -o) $(uname -v)"
    local node_version=$(check_current_node_version)
    if test -n node_version; then
        log "node" "$node_version"
    else
        log "node" "not installed"
    fi
    local adone_version=$(check_current_adone_version)
    if test -n "$adone_version"; then
        log "adone" "$adone_version"
    else
        log "adone" "not installed"
    fi
}

node_arguments_handler() {
    if test $# -eq 0; then
        log "node" "command required"  # print installed versions?
        exit 1
    fi

    while test $# -ne 0; do
        case $1 in
            -f|--force) FORCE=true ;;
            ls) display_installed_versions; exit ;;
            ls-remote) display_remote_versions; exit ;;
            latest) display_latest_version; exit ;;
            stable) display_stable_version; exit ;;
            download) shift; download $1; exit ;;
            activate) shift; activate $1; exit ;;
            install) shift; install $1; exit ;;
            update) shift; FORCE=true; install latest; exit ;;
            rm) shift; remove_version $1; exit ;;
            --build) BUILD=true ;;
            --user) shift; USER=$1 ;;
            --pass) shift; PASS=$1 ;;
            build) shift; build_node $1; exit ;;
            upload) shift; upload_node "$@"; exit ;;
            *) log "node" "Unknown argument $1"; exit 1 ;;
        esac
        shift
    done
}

adone_arguments_handler() {
    if test $# -eq 0; then
        log "adone" "command required"  # print installed versions?
        exit 1
    fi

    while test $# -ne 0; do
        case $1 in
            -f|--force) FORCE=true ;;
            ls) display_installed_versions; exit ;;
            ls-remote) display_remote_versions; exit ;;
            latest) display_latest_version; exit ;;
            stable) display_stable_version; exit ;;
            activate) shift; activate $1; exit ;;
            download) shift; download $1; exit ;;
            install) shift; install $1; exit ;;
            update) FORCE=true; install latest; exit ;;
            rm) shift; remove_version $1; exit ;;
            link) shift; adone_link $1; exit ;;
            rm-link) shift; adone_rm_link $1; exit ;;
            --prefix) shift; ADONE_DIR=$1; ;;
            *) log "adone" "Unknown argument $1"; exit 1 ;;
        esac
        shift
    done
}

avm_arguments_handler() {
    if test $# -eq 0; then
        display_help
        exit 1
    fi
    while test $# -ne 0; do
        case $1 in
            -h|--help) display_help; exit ;;
            -v|--version) display_avm_version; exit ;;
            rm) remove_avm; exit ;;
            install) install_avm; exit ;;
            update) install_avm; exit ;;  # heh
            -c|--clean) CLEAN=true ;;
            bootstrap) bootstrap; exit ;;
            deps) shift; deps_arguments_handler $@; exit ;;
            node) shift; set_node; node_arguments_handler $@; exit ;;
            adone) shift; set_adone; adone_arguments_handler $@; exit ;;
            info) info; exit ;;
            --user) shift; USER=$1 ;;
            --pass) shift; PASS=$1 ;;
            upload) shift; upload_avm $1 ;;
            *) log "avm" "Unknown argument $1"; exit 1 ;;
        esac
        shift
    done
}

avm_arguments_handler $@
